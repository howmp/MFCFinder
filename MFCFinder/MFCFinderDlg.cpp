// MFCFinderDlg.cpp : implementation file
//

#include "stdafx.h"
#include "MFCFinder.h"
#include "MFCFinderDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif



/////////////////////////////////////////////////////////////////////////////
// CMFCFinderDlg dialog

CMFCFinderDlg::CMFCFinderDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CMFCFinderDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CMFCFinderDlg)
	m_edit = _T("ÍÏÈëÎÄ¼þ");
	//}}AFX_DATA_INIT
	// Note that LoadIcon does not require a subsequent DestroyIcon in Win32
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CMFCFinderDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CMFCFinderDlg)
	DDX_Text(pDX, IDC_EDIT1, m_edit);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CMFCFinderDlg, CDialog)
	//{{AFX_MSG_MAP(CMFCFinderDlg)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_WM_DROPFILES()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CMFCFinderDlg message handlers



// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CMFCFinderDlg::OnPaint() 
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

// The system calls this to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CMFCFinderDlg::OnQueryDragIcon()
{
	return (HCURSOR) m_hIcon;
}


CString vmstr[]=
{
	_T("WM_NULL"),
		_T("WM_CREATE"),
		_T("WM_TABLET_LAST"),
		_T("WM_MOVE"),
		_T(""),
		_T("WM_SIZE"),
		_T("WM_ACTIVATE"),
		_T("WM_SETFOCUS"),
		_T("WM_KILLFOCUS"),
		_T(""),
		_T("WM_ENABLE"),
		_T("WM_SETREDRAW"),
		_T("WM_SETTEXT"),
		_T("WM_GETTEXT"),
		_T("WM_GETTEXTLENGTH"),
		_T("WM_PAINT"),
		_T("WM_CLOSE"),
		_T("WM_QUERYENDSESSION"),
		_T("WM_QUIT"),
		_T("WM_QUERYOPEN"),
		_T("WM_ERASEBKGND"),
		_T("WM_SYSCOLORCHANGE"),
		_T("WM_ENDSESSION"),
		_T(""),
		_T("WM_SHOWWINDOW"),
		_T(""),
		_T("WM_WININICHANGE"),
		_T("WM_DEVMODECHANGE"),
		_T("WM_ACTIVATEAPP"),
		_T("WM_FONTCHANGE"),
		_T("WM_TIMECHANGE"),
		_T("WM_CANCELMODE"),
		_T("WM_SETCURSOR"),
		_T("WM_MOUSEACTIVATE"),
		_T("WM_CHILDACTIVATE"),
		_T("WM_QUEUESYNC"),
		_T("WM_GETMINMAXINFO"),
		_T(""),
		_T("WM_PAINTICON"),
		_T("WM_ICONERASEBKGND"),
		_T("WM_NEXTDLGCTL"),
		_T(""),
		_T("WM_SPOOLERSTATUS"),
		_T("WM_DRAWITEM"),
		_T("WM_MEASUREITEM"),
		_T("WM_DELETEITEM"),
		_T("WM_VKEYTOITEM"),
		_T("WM_CHARTOITEM"),
		_T("WM_SETFONT"),
		_T("WM_GETFONT"),
		_T("WM_SETHOTKEY"),
		_T("WM_GETHOTKEY"),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_QUERYDRAGICON"),
		_T(""),
		_T("WM_COMPAREITEM"),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_GETOBJECT"),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_COMPACTING"),
		_T(""),
		_T(""),
		_T("WM_COMMNOTIFY"),
		_T(""),
		_T("WM_WINDOWPOSCHANGING"),
		_T("WM_WINDOWPOSCHANGED"),
		_T("WM_POWER"),
		_T(""),
		_T("WM_COPYDATA"),
		_T("WM_CANCELJOURNAL"),
		_T(""),
		_T(""),
		_T("WM_NOTIFY"),
		_T(""),
		_T("WM_INPUTLANGCHANGEREQUEST"),
		_T("WM_INPUTLANGCHANGE"),
		_T("WM_TCARD"),
		_T("WM_HELP"),
		_T("WM_USERCHANGED"),
		_T("WM_NOTIFYFORMAT"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_CONTEXTMENU"),
		_T("WM_STYLECHANGING"),
		_T("WM_STYLECHANGED"),
		_T("WM_DISPLAYCHANGE"),
		_T("WM_GETICON"),
		_T("WM_SETICON"),
		_T("WM_NCCREATE"),
		_T("WM_NCDESTROY"),
		_T("WM_NCCALCSIZE"),
		_T("WM_NCHITTEST"),
		_T("WM_NCPAINT"),
		_T("WM_NCACTIVATE"),
		_T("WM_GETDLGCODE"),
		_T("WM_SYNCPAINT"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_NCMOUSEMOVE"),
		_T("WM_NCLBUTTONDOWN"),
		_T("WM_NCLBUTTONUP"),
		_T("WM_NCLBUTTONDBLCLK"),
		_T("WM_NCRBUTTONDOWN"),
		_T("WM_NCRBUTTONUP"),
		_T("WM_NCRBUTTONDBLCLK"),
		_T("WM_NCMBUTTONDOWN"),
		_T("WM_NCMBUTTONUP"),
		_T("WM_NCMBUTTONDBLCLK"),
		_T(""),
		_T("WM_NCXBUTTONDOWN"),
		_T("WM_NCXBUTTONUP"),
		_T("WM_NCXBUTTONDBLCLK"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_INPUT_DEVICE_CHANGE"),
		_T("WM_INPUT"),
		_T("WM_KEYDOWN"),
		_T("WM_KEYUP"),
		_T("WM_CHAR"),
		_T("WM_DEADCHAR"),
		_T("WM_SYSKEYDOWN"),
		_T("WM_SYSKEYUP"),
		_T("WM_SYSCHAR"),
		_T("WM_SYSDEADCHAR"),
		_T("WM_KEYLAST"),
		_T("WM_KEYLAST"),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_IME_STARTCOMPOSITION"),
		_T("WM_IME_ENDCOMPOSITION"),
		_T("WM_IME_KEYLAST"),
		_T("WM_INITDIALOG"),
		_T("WM_COMMAND"),
		_T("WM_SYSCOMMAND"),
		_T("WM_TIMER"),
		_T("WM_HSCROLL"),
		_T("WM_VSCROLL"),
		_T("WM_INITMENU"),
		_T("WM_INITMENUPOPUP"),
		_T(""),
		_T("WM_GESTURE"),
		_T("WM_GESTURENOTIFY"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_MENUSELECT"),
		_T("WM_MENUCHAR"),
		_T("WM_ENTERIDLE"),
		_T("WM_MENURBUTTONUP"),
		_T("WM_MENUDRAG"),
		_T("WM_MENUGETOBJECT"),
		_T("WM_UNINITMENUPOPUP"),
		_T("WM_MENUCOMMAND"),
		_T("WM_CHANGEUISTATE"),
		_T("WM_UPDATEUISTATE"),
		_T("WM_QUERYUISTATE"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_CTLCOLORMSGBOX"),
		_T("WM_CTLCOLOREDIT"),
		_T("WM_CTLCOLORLISTBOX"),
		_T("WM_CTLCOLORBTN"),
		_T("WM_CTLCOLORDLG"),
		_T("WM_CTLCOLORSCROLLBAR"),
		_T("WM_CTLCOLORSTATIC"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_MOUSEMOVE"),
		_T("WM_LBUTTONDOWN"),
		_T("WM_LBUTTONUP"),
		_T("WM_LBUTTONDBLCLK"),
		_T("WM_RBUTTONDOWN"),
		_T("WM_RBUTTONUP"),
		_T("WM_RBUTTONDBLCLK"),
		_T("WM_MBUTTONDOWN"),
		_T("WM_MBUTTONUP"),
		_T("WM_MOUSELAST"),
		_T("WM_MOUSELAST"),
		_T("WM_XBUTTONDOWN"),
		_T("WM_XBUTTONUP"),
		_T("WM_MOUSELAST"),
		_T("WM_MOUSELAST"),
		_T(""),
		_T("WM_PARENTNOTIFY"),
		_T("WM_ENTERMENULOOP"),
		_T("WM_EXITMENULOOP"),
		_T("WM_NEXTMENU"),
		_T("WM_SIZING"),
		_T("WM_CAPTURECHANGED"),
		_T("WM_MOVING"),
		_T(""),
		_T("WM_POWERBROADCAST"),
		_T("WM_DEVICECHANGE"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_MDICREATE"),
		_T("WM_MDIDESTROY"),
		_T("WM_MDIACTIVATE"),
		_T("WM_MDIRESTORE"),
		_T("WM_MDINEXT"),
		_T("WM_MDIMAXIMIZE"),
		_T("WM_MDITILE"),
		_T("WM_MDICASCADE"),
		_T("WM_MDIICONARRANGE"),
		_T("WM_MDIGETACTIVE"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_MDISETMENU"),
		_T("WM_ENTERSIZEMOVE"),
		_T("WM_EXITSIZEMOVE"),
		_T("WM_DROPFILES"),
		_T("WM_MDIREFRESHMENU"),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_POINTERDEVICECHANGE"),
		_T("WM_POINTERDEVICEINRANGE"),
		_T("WM_POINTERDEVICEOUTOFRANGE"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_TOUCH"),
		_T("WM_NCPOINTERUPDATE"),
		_T("WM_NCPOINTERDOWN"),
		_T("WM_NCPOINTERUP"),
		_T(""),
		_T("WM_POINTERUPDATE"),
		_T("WM_POINTERDOWN"),
		_T("WM_POINTERUP"),
		_T(""),
		_T("WM_POINTERENTER"),
		_T("WM_POINTERLEAVE"),
		_T("WM_POINTERACTIVATE"),
		_T("WM_POINTERCAPTURECHANGED"),
		_T("WM_TOUCHHITTESTING"),
		_T("WM_POINTERWHEEL"),
		_T("WM_POINTERHWHEEL"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_IME_SETCONTEXT"),
		_T("WM_IME_NOTIFY"),
		_T("WM_IME_CONTROL"),
		_T("WM_IME_COMPOSITIONFULL"),
		_T("WM_IME_SELECT"),
		_T("WM_IME_CHAR"),
		_T(""),
		_T("WM_IME_REQUEST"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_IME_KEYDOWN"),
		_T("WM_IME_KEYUP"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_NCMOUSEHOVER"),
		_T("WM_MOUSEHOVER"),
		_T("WM_NCMOUSELEAVE"),
		_T("WM_MOUSELEAVE"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_WTSSESSION_CHANGE"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_DPICHANGED"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_CUT"),
		_T("WM_COPY"),
		_T("WM_PASTE"),
		_T("WM_CLEAR"),
		_T("WM_UNDO"),
		_T("WM_RENDERFORMAT"),
		_T("WM_RENDERALLFORMATS"),
		_T("WM_DESTROYCLIPBOARD"),
		_T("WM_DRAWCLIPBOARD"),
		_T("WM_PAINTCLIPBOARD"),
		_T("WM_VSCROLLCLIPBOARD"),
		_T("WM_SIZECLIPBOARD"),
		_T("WM_ASKCBFORMATNAME"),
		_T("WM_CHANGECBCHAIN"),
		_T("WM_HSCROLLCLIPBOARD"),
		_T("WM_QUERYNEWPALETTE"),
		_T("WM_PALETTEISCHANGING"),
		_T("WM_PALETTECHANGED"),
		_T("WM_HOTKEY"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_PRINT"),
		_T("WM_PRINTCLIENT"),
		_T("WM_APPCOMMAND"),
		_T("WM_THEMECHANGED"),
		_T(""),
		_T(""),
		_T("WM_CLIPBOARDUPDATE"),
		_T("WM_DWMCOMPOSITIONCHANGED"),
		_T("WM_DWMNCRENDERINGCHANGED"),
		_T("WM_DWMCOLORIZATIONCOLORCHANGED"),
		_T("WM_DWMWINDOWMAXIMIZEDCHANGE"),
		_T(""),
		_T("WM_DWMSENDICONICTHUMBNAIL"),
		_T(""),
		_T(""),
		_T("WM_DWMSENDICONICLIVEPREVIEWBITMAP"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_GETTITLEBARINFOEX"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_HANDHELDFIRST"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_HANDHELDLAST"),
		_T("WM_AFXFIRST"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_AFXLAST"),
		_T("WM_PENWINFIRST"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_PENWINLAST"),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T(""),
		_T("WM_USER"),
};



CString GetMap(BYTE* data)
{
	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)data;
	size_t i = 0;
	if (dos_header->e_magic != IMAGE_DOS_SIGNATURE)
	{
		return _T("e_magic±êÖ¾´íÎó");
	}
	PIMAGE_NT_HEADERS32 nt_header = (PIMAGE_NT_HEADERS32)(data + dos_header->e_lfanew);
	if (nt_header->Signature != IMAGE_NT_SIGNATURE)
	{
		return _T("Signature±êÖ¾´íÎó");
	}
	PIMAGE_SECTION_HEADER section_header = IMAGE_FIRST_SECTION(nt_header);
	ULONG codestart=0, codeend=0, rdatasize=0,datasize=0;
	PULONG rdatastart = NULL;PULONG datastart = NULL;
	for (i = 0; i < nt_header->FileHeader.NumberOfSections; i++)
	{
		if (!lstrcmpA( (PCHAR)&section_header[i].Name,".text"))
		{
			codestart = section_header[i].VirtualAddress + nt_header->OptionalHeader.ImageBase;
			codeend = section_header[i].SizeOfRawData + codestart;
		}
		if (!lstrcmpA((PCHAR)&section_header[i].Name, ".rdata"))
		{
			rdatastart = (PULONG)(data + section_header[i].PointerToRawData);
			rdatasize = section_header[i].SizeOfRawData /4;
		}
		if (!lstrcmpA((PCHAR)&section_header[i].Name, ".data"))
		{
			datastart = (PULONG)(data + section_header[i].PointerToRawData);
			datasize = section_header[i].SizeOfRawData /4;
		}
	}
	if (!codestart)
	{
		return _T("Ã»ÓÐÕÒµ½´úÂë¶Î.text");
	}
	if (!rdatastart || !datastart )
	{
		return _T("Ã»ÓÐÕÒµ½´úÂë¶Î.rdata»ò.data");
	}
	CString ret = _T("");
	i = 0;
	size_t oldi = -1;
	CString tmp = _T("");
	while (i < rdatasize)
	{
		if (
			rdatastart[i] > 0 &&
			rdatastart[i] <= 1024 &&
			//rdatastart[i + 1] == 0 &&
			rdatastart[i + 4] >= 0 &&
			rdatastart[i + 4] < 100 &&
			rdatastart[i + 5] >= codestart &&
			rdatastart[i + 5] < codeend
			)
		{
			if (oldi+6!=i && oldi!=-1)
			{
				tmp.Format(_T("----------------\r\n"));
				ret+=tmp;
			}
			tmp.Format(_T("%08X:%s[%08X:%08X:%08X:%08X:%08X:%08X]\r\n"), rdatastart[i + 5], vmstr[rdatastart[i]], rdatastart[i], rdatastart[i+1], rdatastart[i+2], rdatastart[i+3], rdatastart[i+4], rdatastart[i+5]);
			ret+=tmp;
			oldi = i;
		}
		i++;
	}
	i = 0;
	oldi = -1;
	tmp = _T("");
	while (i < datasize)
	{
		if (
			datastart[i] > 0 &&
			datastart[i] <= 1024 &&
			//rdatastart[i + 1] == 0 &&
			datastart[i + 4] >= 0 &&
			datastart[i + 4] < 100 &&
			datastart[i + 5] >= codestart &&
			datastart[i + 5] < codeend
			)
		{
			if (oldi+6!=i && oldi!=-1)
			{
				tmp.Format(_T("----------------\r\n"));
				ret+=tmp;
			}
			tmp.Format(_T("%08X:%s[%08X:%08X:%08X:%08X:%08X:%08X]\r\n"), datastart[i + 5], vmstr[datastart[i]], datastart[i], datastart[i+1], datastart[i+2], datastart[i+3], datastart[i+4], datastart[i+5]);
			ret+=tmp;
			oldi = i;
		}
		i++;
	}

	if (ret == _T(""))
	{
		ret = _T("¿ÉÄÜ²»ÊÇMFC");
	}
	return ret;
}
void CMFCFinderDlg::OnDropFiles(HDROP hDropInfo) 
{
	// TODO: Add your message handler code here and/or call default
	// TODO: ÔÚ´ËÌí¼ÓÏûÏ¢´¦Àí³ÌÐò´úÂëºÍ/»òµ÷ÓÃÄ¬ÈÏÖµ
	TCHAR wcStr[MAX_PATH];
	int DropCount = DragQueryFile(hDropInfo, -1, NULL, 0);//È¡µÃ±»ÍÏ¶¯ÎÄ¼þµÄÊýÄ¿
	DragQueryFile(hDropInfo, 0, wcStr, MAX_PATH);//»ñµÃÍÏÒ·µÄµÚ1¸öÎÄ¼þµÄÎÄ¼þÃû
	DragFinish(hDropInfo);  //ÍÏ·Å½áÊøºó,ÊÍ·ÅÄÚ´æ
	CFile pefile;
	if (!pefile.Open(wcStr, CFile::modeRead | CFile::typeBinary))
	{
		m_edit = _T("ÎÞ·¨¶ÁÈ¡³ÌÐò");
		UpdateData(FALSE);
	}
	else
	{
		UINT filelen = pefile.GetLength();
		BYTE *buffer = new BYTE[filelen];
		pefile.Read(buffer, filelen);
		m_edit = GetMap(buffer);
		UpdateData(FALSE);
		pefile.Close();
		delete[] buffer;
	}	
	CDialog::OnDropFiles(hDropInfo);
}
BOOL CMFCFinderDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon
	
	// TODO: Add extra initialization here
	return TRUE;  // return TRUE  unless you set the focus to a control
}